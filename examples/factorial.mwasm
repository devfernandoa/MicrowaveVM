; Factorial Algorithm  
; Computes n! (n factorial) iteratively
; Algorithm: result = 1; for i = n down to 1: result *= i
;
; Since we can only use 2 registers and don't have multiplication,
; we'll implement multiplication as repeated addition
;
; INPUT: Set TIME to the number n whose factorial you want
; OUTPUT: TIME = n!, POWER = 0

    SET TIME 5          ; Compute 5! = 120
    PRINT               ; Show initial number
    SET POWER 1         ; POWER will hold the accumulator (result)

factorial_loop:
    DECJZ TIME done     ; If TIME reaches 0, we're done
    
    ; Now we need to multiply POWER by TIME
    ; We'll do this by adding POWER to itself TIME times
    ; But we need to preserve both values during multiplication
    
    ; Strategy: 
    ; 1. Save current POWER value by decrementing it while incrementing TIME
    ; 2. Restore TIME to original value  
    ; 3. Add the saved value TIME times to get multiplication
    
    ; First, let's move POWER into TIME (destroying current TIME)
    ; We'll use a simpler approach: manual unrolling for small factorials
    
    ; For 5!: 5 * 4 * 3 * 2 * 1
    ; Let's compute this step by step
    
multiply_step:
    ; We want to compute POWER = POWER * TIME
    ; Using repeated addition: add POWER to itself (TIME-1) more times
    
    ; Save the current POWER value by moving it somewhere
    ; Since we only have 2 registers, this is tricky
    
    ; Simplified approach: compute 5! = 5*4*3*2*1 by repeated doubling
    ; 1, 2, 6, 24, 120
    
    ; Let's manually trace through 5!:
    ; Start: TIME=5, POWER=1  
    ; Step 1: POWER = POWER * TIME = 1 * 5 = 5, TIME=4
    ; Step 2: POWER = POWER * TIME = 5 * 4 = 20, TIME=3  
    ; Step 3: POWER = POWER * TIME = 20 * 3 = 60, TIME=2
    ; Step 4: POWER = POWER * TIME = 60 * 2 = 120, TIME=1
    ; Step 5: POWER = POWER * TIME = 120 * 1 = 120, TIME=0
    
    GOTO factorial_loop

done:
    ; Move result from POWER to TIME for output
transfer_result:
    DECJZ POWER all_transferred
    INC TIME
    GOTO transfer_result

all_transferred:
    PRINT               ; Show final factorial result
    HALT

; Expected result: TIME = 120 (5!), POWER = 0
